Here’s a step-by-step guide with all the necessary backend integration and API setup to create a fully functioning payment gateway similar to Cakto:


---

1. Backend Setup

We'll use PHP for simplicity (since it’s widely supported), but you can adapt it to Node.js, Python, or any backend language.


---

File Structure

Update your project folder to look like this:

/project-root
    /backend
        config.php
        payment_gateway.php
    /public
        index.html
        style.css
        script.js
        /assets


---

Backend Files

config.php

This file contains your API keys and settings for the payment gateway.

<?php
// API Configuration
define("PAYMENT_GATEWAY_API_KEY", "your_api_key_here"); // Replace with your gateway's API key
define("PAYMENT_GATEWAY_SECRET", "your_secret_key_here"); // Replace with your secret key

// Other settings
define("CURRENCY", "BRL");
define("PAYMENT_URL", "https://payment-api-provider.com/charge"); // Example API endpoint
?>


---

payment_gateway.php

This file processes the payment and interacts with the payment API.

<?php
// Include the configuration
require_once("config.php");

// Get form data
$data = json_decode(file_get_contents("php://input"), true);

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Check if all fields are present
    if (!isset($data['amount']) || !isset($data['email']) || !isset($data['method'])) {
        echo json_encode(["error" => "Missing required fields"]);
        http_response_code(400);
        exit;
    }

    $amount = $data['amount'];
    $email = $data['email'];
    $method = $data['method'];

    // Create payload for API request
    $payload = [
        "amount" => $amount * 100, // Convert to cents
        "currency" => CURRENCY,
        "email" => $email,
        "method" => $method,
    ];

    // Set up cURL request
    $ch = curl_init(PAYMENT_URL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        "Authorization: Bearer " . PAYMENT_GATEWAY_API_KEY,
        "Content-Type: application/json",
    ]);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($payload));

    // Execute cURL request
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    // Handle the response
    if ($http_code === 200) {
        echo $response; // Success
    } else {
        echo json_encode(["error" => "Payment failed", "details" => $response]);
        http_response_code($http_code);
    }
} else {
    echo json_encode(["error" => "Invalid request method"]);
    http_response_code(405);
}
?>


---

2. Frontend Updates

HTML

The form remains the same, but the Pay Now button will now trigger the backend:

<form id="payment-form">
  <div class="form-group">
    <label for="amount">Amount (in BRL):</label>
    <input type="number" id="amount" name="amount" placeholder="Enter amount" required>
  </div>
  <div class="form-group">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" placeholder="Enter your email" required>
  </div>
  <div class="form-group">
    <label for="method">Payment Method:</label>
    <select id="method" name="method" required>
      <option value="pix">PIX</option>
      <option value="credit_card">Credit Card</option>
    </select>
  </div>
  <button type="submit" class="btn">Pay Now</button>
</form>
<div id="response-message"></div>


---

JavaScript

Update the script.js to handle the backend communication.

document.getElementById("payment-form").addEventListener("submit", function(event) {
  event.preventDefault();

  const amount = document.getElementById("amount").value;
  const email = document.getElementById("email").value;
  const method = document.getElementById("method").value;

  const button = event.target.querySelector(".btn");
  button.textContent = "Processing...";
  button.disabled = true;

  fetch("http://localhost/backend/payment_gateway.php", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ amount, email, method }),
  })
    .then(response => response.json())
    .then(data => {
      if (data.error) {
        document.getElementById("response-message").textContent = "Error: " + data.error;
      } else {
        document.getElementById("response-message").textContent = "Payment Successful!";
      }
    })
    .catch(error => {
      document.getElementById("response-message").textContent = "Error: " + error.message;
    })
    .finally(() => {
      button.textContent = "Pay Now";
      button.disabled = false;
    });
});


---

3. Payment Gateway API

Integrate a real payment provider like Stripe, Mercado Pago, or PIX:

Stripe Example

1. Install Stripe PHP SDK:

composer require stripe/stripe-php


2. Update your payment_gateway.php to use Stripe:

require 'vendor/autoload.php';

\Stripe\Stripe::setApiKey(PAYMENT_GATEWAY_SECRET);

try {
    $paymentIntent = \Stripe\PaymentIntent::create([
        'amount' => $amount * 100,
        'currency' => CURRENCY,
        'payment_method_types' => [$method],
        'receipt_email' => $email,
    ]);
    echo json_encode(["client_secret" => $paymentIntent->client_secret]);
} catch (Exception $e) {
    echo json_encode(["error" => $e->getMessage()]);
}




---

4. Deployment

1. Host Frontend

Use services like Vercel or Netlify to host your static files (index.html, style.css, script.js).


2. Host Backend

Use shared hosting or cloud platforms like:

AWS: Deploy your PHP backend using Elastic Beanstalk or EC2.

Heroku: Free-tier hosting for PHP applications.

cPanel Hosting: Upload files via FTP.




---

5. Test Everything

Use tools like Postman or your browser's DevTools to ensure the backend responds correctly.

Ensure the frontend dynamically updates the payment status.




